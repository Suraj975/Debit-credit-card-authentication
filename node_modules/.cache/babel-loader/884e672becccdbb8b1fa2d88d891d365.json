{"ast":null,"code":"import moment from \"moment\";\nexport function stripeCardNumberValidation(cardNumber) {\n  var regexPattern = {\n    MASTERCARD: /^5[1-5][0-9]{1,}|^2[2-7][0-9]{1,}$/,\n    VISA: /^4[0-9]{2,}$/,\n    AMERICAN_EXPRESS: /^3[47][0-9]{5,}$/,\n    DISCOVER: /^6(?:011|5[0-9]{2})[0-9]{3,}$/,\n    DINERS_CLUB: /^3(?:0[0-5]|[68][0-9])[0-9]{4,}$/,\n    JCB: /^(?:2131|1800|35[0-9]{3})[0-9]{3,}$/\n  };\n\n  for (var card in regexPattern) {\n    if (cardNumber.replace(/[^\\d]/g, \"\").match(regexPattern[card])) {\n      if (cardNumber) {\n        return cardNumber && /^[1-6]{1}[0-9]{14,15}$/i.test(cardNumber.replace(/[^\\d]/g, \"\").trim()) ? \"\" : \"Enter a valid Card\";\n      }\n    }\n  }\n\n  return \"Enter a valid Card\";\n}\nexport var stripeCardExpirValidation = function stripeCardExpirValidation(value) {\n  if (value) {\n    if (/^(0[1-9]|1[0-2])\\/[0-9]{2}$/i.test(value.trim())) {\n      var today = new Date();\n      var CurrentDate = moment(new Date(today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate()));\n      var visaValue = value.split(\"/\");\n      var visaDate = new Date(\"20\".concat(visaValue[1]), visaValue[0], 0);\n      return CurrentDate < moment(visaDate) ? undefined : \"Please enter valid date\";\n    } else {\n      return \"Invalid date format\";\n    }\n  }\n};\nexport var textWithSpacesOnly = function textWithSpacesOnly(value) {\n  if (value) {\n    if (/^[a-zA-Z ]*$/i.test(value)) {\n      return undefined;\n    } else {\n      return \"Only alphabets\";\n    }\n  } else {\n    return undefined;\n  }\n};\nexport var minLength = function minLength(min) {\n  return function (value) {\n    return value && value.length < min ? \"Must be 3 characters or more\" : undefined;\n  };\n};","map":{"version":3,"sources":["/Users/surajsingh/Downloads/Debit-credit-card-authentication/src/validations.js"],"names":["moment","stripeCardNumberValidation","cardNumber","regexPattern","MASTERCARD","VISA","AMERICAN_EXPRESS","DISCOVER","DINERS_CLUB","JCB","card","replace","match","test","trim","stripeCardExpirValidation","value","today","Date","CurrentDate","getFullYear","getMonth","getDate","visaValue","split","visaDate","undefined","textWithSpacesOnly","minLength","min","length"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,SAASC,0BAAT,CAAoCC,UAApC,EAAgD;AACrD,MAAMC,YAAY,GAAG;AACnBC,IAAAA,UAAU,EAAE,oCADO;AAEnBC,IAAAA,IAAI,EAAE,cAFa;AAGnBC,IAAAA,gBAAgB,EAAE,kBAHC;AAInBC,IAAAA,QAAQ,EAAE,+BAJS;AAKnBC,IAAAA,WAAW,EAAE,kCALM;AAMnBC,IAAAA,GAAG,EAAE;AANc,GAArB;;AAQA,OAAK,IAAMC,IAAX,IAAmBP,YAAnB,EAAiC;AAC/B,QAAID,UAAU,CAACS,OAAX,CAAmB,QAAnB,EAA6B,EAA7B,EAAiCC,KAAjC,CAAuCT,YAAY,CAACO,IAAD,CAAnD,CAAJ,EAAgE;AAC9D,UAAIR,UAAJ,EAAgB;AACd,eAAOA,UAAU,IACf,0BAA0BW,IAA1B,CACEX,UAAU,CAACS,OAAX,CAAmB,QAAnB,EAA6B,EAA7B,EAAiCG,IAAjC,EADF,CADK,GAIH,EAJG,GAKH,oBALJ;AAMD;AACF;AACF;;AACD,SAAO,oBAAP;AACD;AAED,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAW;AAClD,MAAIA,KAAJ,EAAW;AACT,QAAI,+BAA+BH,IAA/B,CAAoCG,KAAK,CAACF,IAAN,EAApC,CAAJ,EAAuD;AACrD,UAAIG,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,UAAIC,WAAW,GAAGnB,MAAM,CACtB,IAAIkB,IAAJ,CACED,KAAK,CAACG,WAAN,KACE,GADF,IAEGH,KAAK,CAACI,QAAN,KAAmB,CAFtB,IAGE,GAHF,GAIE,IAAIH,IAAJ,CAASD,KAAK,CAACG,WAAN,EAAT,EAA8BH,KAAK,CAACI,QAAN,KAAmB,CAAjD,EAAoD,CAApD,EAAuDC,OAAvD,EALJ,CADsB,CAAxB;AASA,UAAIC,SAAS,GAAGP,KAAK,CAACQ,KAAN,CAAY,GAAZ,CAAhB;AACA,UAAIC,QAAQ,GAAG,IAAIP,IAAJ,aAAcK,SAAS,CAAC,CAAD,CAAvB,GAA8BA,SAAS,CAAC,CAAD,CAAvC,EAA4C,CAA5C,CAAf;AACA,aAAOJ,WAAW,GAAGnB,MAAM,CAACyB,QAAD,CAApB,GACHC,SADG,GAEH,yBAFJ;AAGD,KAhBD,MAgBO;AACL,aAAO,qBAAP;AACD;AACF;AACF,CAtBM;AAwBP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACX,KAAD,EAAW;AAC3C,MAAIA,KAAJ,EAAW;AACT,QAAI,gBAAgBH,IAAhB,CAAqBG,KAArB,CAAJ,EAAiC;AAC/B,aAAOU,SAAP;AACD,KAFD,MAEO;AACL,aAAO,gBAAP;AACD;AACF,GAND,MAMO;AACL,WAAOA,SAAP;AACD;AACF,CAVM;AAYP,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;AAAA,SAAS,UAACb,KAAD;AAAA,WAChCA,KAAK,IAAIA,KAAK,CAACc,MAAN,GAAeD,GAAxB,oCAA+DH,SAD/B;AAAA,GAAT;AAAA,CAAlB","sourcesContent":["import moment from \"moment\";\n\nexport function stripeCardNumberValidation(cardNumber) {\n  const regexPattern = {\n    MASTERCARD: /^5[1-5][0-9]{1,}|^2[2-7][0-9]{1,}$/,\n    VISA: /^4[0-9]{2,}$/,\n    AMERICAN_EXPRESS: /^3[47][0-9]{5,}$/,\n    DISCOVER: /^6(?:011|5[0-9]{2})[0-9]{3,}$/,\n    DINERS_CLUB: /^3(?:0[0-5]|[68][0-9])[0-9]{4,}$/,\n    JCB: /^(?:2131|1800|35[0-9]{3})[0-9]{3,}$/\n  };\n  for (const card in regexPattern) {\n    if (cardNumber.replace(/[^\\d]/g, \"\").match(regexPattern[card])) {\n      if (cardNumber) {\n        return cardNumber &&\n          /^[1-6]{1}[0-9]{14,15}$/i.test(\n            cardNumber.replace(/[^\\d]/g, \"\").trim()\n          )\n          ? \"\"\n          : \"Enter a valid Card\";\n      }\n    }\n  }\n  return \"Enter a valid Card\";\n}\n\nexport const stripeCardExpirValidation = (value) => {\n  if (value) {\n    if (/^(0[1-9]|1[0-2])\\/[0-9]{2}$/i.test(value.trim())) {\n      let today = new Date();\n      let CurrentDate = moment(\n        new Date(\n          today.getFullYear() +\n            \"-\" +\n            (today.getMonth() + 1) +\n            \"-\" +\n            new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate()\n        )\n      );\n      let visaValue = value.split(\"/\");\n      let visaDate = new Date(`20${visaValue[1]}`, visaValue[0], 0);\n      return CurrentDate < moment(visaDate)\n        ? undefined\n        : \"Please enter valid date\";\n    } else {\n      return \"Invalid date format\";\n    }\n  }\n};\n\nexport const textWithSpacesOnly = (value) => {\n  if (value) {\n    if (/^[a-zA-Z ]*$/i.test(value)) {\n      return undefined;\n    } else {\n      return \"Only alphabets\";\n    }\n  } else {\n    return undefined;\n  }\n};\n\nexport const minLength = (min) => (value) =>\n  value && value.length < min ? `Must be 3 characters or more` : undefined;\n"]},"metadata":{},"sourceType":"module"}